ui <- fluidPage(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = 1948:2008
),
leafletOutput('map')
)
#input$year_sel
server <- function(input, output, session) {
# Filtering
# Label for individual regions
reg_labels <- reactive({
reg_labels <- paste(
'<strong>Region: ', italy$Region, '</strong><br/>',
'Voter turnout: ', italy$Voter.turnout, '<br/>',
'Parties: ', italy$Party
) %>%
lapply(htmltools::HTML)
})
pal <- reactive({
pal <- colorNumeric(palette = 'YlOrRd',domain = italy$Voter.turnout)
})
output$map <- renderLeaflet({
leaflet() %>%
addPolygons(
data = input$italy,
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels
)
})
}
shinyApp(ui, server)
# TODO - Change hard coded min max values
ui <- fluidPage(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = 1948:2008
),
leafletOutput('map')
)
# TODO - Change hard coded min max values
ui <- fluidPage(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = 1948:2008
),
leafletOutput('map')
)
# TODO - Change hard coded min max values
ui <- fluidPage(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = 1948:2008
),
leafletOutput('map')
)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(rnaturalearth)
library(rgeos)
library(leaflet)
library(shiny)
`%notin%` <- Negate(`%in%`)
# TODO - Change hard coded min max values
ui <- fluidPage(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = 1948:2008
),
leafletOutput('map')
)
#input$year_sel
server <- function(input, output, session) {
# Filtering
italy <- reactive({
italy <- italy %>%
filter(Year == 2018, House == 'Chamber')
})
# Label for individual regions
reg_labels <- reactive({
reg_labels <- paste(
'<strong>Region: ', italy$Region, '</strong><br/>',
'Voter turnout: ', italy$Voter.turnout, '<br/>',
'Parties: ', italy$Party
) %>%
lapply(htmltools::HTML)
})
pal <- reactive({
pal <- colorNumeric(palette = 'YlOrRd',domain = italy$Voter.turnout)
})
output$map <- renderLeaflet({
leaflet() %>%
addPolygons(
data = input$italy,
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels
)
})
}
shinyApp(ui, server)
# TODO - Change hard coded min max values
ui <- fluidPage(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = 1948:2008
),
leafletOutput('map')
)
#input$year_sel
server <- function(input, output, session) {
# Filtering
italy <- reactive({
input$italy
})
# Label for individual regions
reg_labels <- reactive({
reg_labels <- paste(
'<strong>Region: ', italy$Region, '</strong><br/>',
'Voter turnout: ', italy$Voter.turnout, '<br/>',
'Parties: ', italy$Party
) %>%
lapply(htmltools::HTML)
})
pal <- reactive({
pal <- colorNumeric(palette = 'YlOrRd',domain = italy$Voter.turnout)
})
output$map <- renderLeaflet({
leaflet() %>%
addPolygons(
data = italy(),
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels
)
})
}
shinyApp(ui, server)
# TODO - Change hard coded min max values
ui <- fluidPage(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = 1948:2008
),
leafletOutput('map')
)
#input$year_sel
server <- function(input, output, session, italy) {
# Filtering
# Label for individual regions
reg_labels <- reactive({
reg_labels <- paste(
'<strong>Region: ', italy$Region, '</strong><br/>',
'Voter turnout: ', italy$Voter.turnout, '<br/>',
'Parties: ', italy$Party
) %>%
lapply(htmltools::HTML)
})
pal <- reactive({
pal <- colorNumeric(palette = 'YlOrRd',domain = italy$Voter.turnout)
})
output$map <- renderLeaflet({
leaflet() %>%
addPolygons(
data = italy,
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels
)
})
}
shinyApp(ui, server)
# TODO - Change hard coded min max values
ui <- fluidPage(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = 1948:2008
),
leafletOutput('map'),
italy
)
#input$year_sel
server <- function(input, output, session) {
# Filtering
# Label for individual regions
reg_labels <- reactive({
reg_labels <- paste(
'<strong>Region: ', italy$Region, '</strong><br/>',
'Voter turnout: ', italy$Voter.turnout, '<br/>',
'Parties: ', italy$Party
) %>%
lapply(htmltools::HTML)
})
pal <- reactive({
pal <- colorNumeric(palette = 'YlOrRd',domain = italy$Voter.turnout)
})
output$map <- renderLeaflet({
leaflet() %>%
addPolygons(
data = input$italy,
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels
)
})
}
shinyApp(ui, server)
# TODO - Abruzzi e Molise
italy <- ne_states(country="Italy", returnclass="sf") %>%
rename(Region = region) %>%
group_by(Region) %>%
summarise() %>%
mutate(
Region = str_to_upper(Region),
Region = case_when(
Region == 'APULIA' ~ 'PUGLIA',
Region == 'SICILY' ~ 'SICILIA',
Region == 'TRENTINO-ALTO ADIGE' ~ 'TRENTINO ALTO ADIGE',
Region == 'EMILIA-ROMAGNA' ~ 'EMILIA ROMAGNA',
TRUE ~ Region
)
)
# Building aggregate lists
aggregate_list_it <- list_it_top %>%
group_by(Year, House) %>%
arrange(-Votes) %>%
mutate(Party = paste(Party, Votes, sep = ':', collapse = '<br/>')) %>%
subset(select = -c(Votes)) %>%
distinct(Year, House, Party)
aggregate_list_reg <- list_reg_top %>%
group_by(Year, Region, House) %>%
arrange(-Votes) %>%
mutate(Party = paste(Party, Votes, sep = ':', collapse = '<br/>')) %>%
subset(select = -c(Votes)) %>%
distinct(Region, Year, House, Party)
# Contains geom data + regional data for both lists and ballots
italy <- italy %>%
inner_join(ballot_reg, by='Region') %>%
inner_join(aggregate_list_reg, by=c('Region', 'Year', 'House'))
# TODO - Change hard coded min max values
italy2 <- italy %>%
filter(Year == 2018, House == 'Chamber')
ui <- fluidPage(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = 1948:2008
),
leafletOutput('map'),
italy2
)
#input$year_sel
server <- function(input, output, session) {
# Filtering
#italy <- reactive({
#  italy <- italy %>%
#    filter(Year == 2018, House == 'Chamber')
#})
# Label for individual regions
reg_labels <- reactive({
reg_labels <- paste(
'<strong>Region: ', italy$Region, '</strong><br/>',
'Voter turnout: ', italy$Voter.turnout, '<br/>',
'Parties: ', italy$Party
) %>%
lapply(htmltools::HTML)
})
pal <- reactive({
pal <- colorNumeric(palette = 'YlOrRd',domain = italy$Voter.turnout)
})
output$map <- renderLeaflet({
leaflet() %>%
addPolygons(
data = input$italy2,
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels
)
})
}
shinyApp(ui, server)
# TODO - Change hard coded min max values
italy2 <- italy %>%
filter(Year == 2018, House == 'Chamber')
ui <- fluidPage(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = 1948:2008
),
DT::dataTableOutput("italyTable"),
leafletOutput('map'),
)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(rnaturalearth)
library(rgeos)
library(leaflet)
library(shiny)
library(DT)
packages.install("DT")
install.packages("DT")
library(tidyverse)
library(ggplot2)
library(dplyr)
library(rnaturalearth)
library(rgeos)
library(leaflet)
library(shiny)
library(DT)
`%notin%` <- Negate(`%in%`)
# TODO - Change hard coded min max values
italy2 <- italy %>%
filter(Year == 2018, House == 'Chamber')
ui <- fluidPage(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = 1948:2008
),
DT::dataTableOutput("italyTable"),
leafletOutput('map'),
)
#input$year_sel
server <- function(input, output, session) {
# Filtering
#italy <- reactive({
#  italy <- italy %>%
#    filter(Year == 2018, House == 'Chamber')
#})
output$italyTable = DT::renderDataTable({
italy2
})
# Label for individual regions
reg_labels <- reactive({
reg_labels <- paste(
'<strong>Region: ', italy$Region, '</strong><br/>',
'Voter turnout: ', italy$Voter.turnout, '<br/>',
'Parties: ', italy$Party
) %>%
lapply(htmltools::HTML)
})
pal <- reactive({
pal <- colorNumeric(palette = 'YlOrRd',domain = italy$Voter.turnout)
})
output$map <- renderLeaflet({
leaflet() %>%
addPolygons(
data = output$italyTable,
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels
)
})
}
shinyApp(ui, server)
# TODO - Change hard coded min max values
italy2 <- italy %>%
filter(Year == 2018, House == 'Chamber')
ui <- fluidPage(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = 1948:2008
),
DT::dataTableOutput("italyTable"),
leafletOutput('map'),
)
#input$year_sel
server <- function(input, output, session) {
# Filtering
#italy <- reactive({
#  italy <- italy %>%
#    filter(Year == 2018, House == 'Chamber')
#})
output$italyTable = DT::renderDataTable({
italy2 %>% filter(Year == 2018, House == 'Chamber')
})
# Label for individual regions
reg_labels <- reactive({
reg_labels <- paste(
'<strong>Region: ', italy$Region, '</strong><br/>',
'Voter turnout: ', italy$Voter.turnout, '<br/>',
'Parties: ', italy$Party
) %>%
lapply(htmltools::HTML)
})
pal <- reactive({
pal <- colorNumeric(palette = 'YlOrRd',domain = italy$Voter.turnout)
})
output$map <- renderLeaflet({
leaflet() %>%
addPolygons(
data = output$italyTable,
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels
)
})
}
shinyApp(ui, server)
# TODO - Change hard coded min max values
italy2 <- italy %>%
filter(Year == 2018, House == 'Chamber')
ui <- fluidPage(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = 1948:2008
),
DT::dataTableOutput("italyTable"),
leafletOutput('map'),
)
#input$year_sel
server <- function(input, output, session) {
# Filtering
#italy <- reactive({
#  italy <- italy %>%
#    filter(Year == 2018, House == 'Chamber')
#})
output$italyTable = DT::renderDataTable({
italy2 %>% filter(Year == input$year_sel, House == 'Chamber')
})
# Label for individual regions
reg_labels <- reactive({
reg_labels <- paste(
'<strong>Region: ', italy$Region, '</strong><br/>',
'Voter turnout: ', italy$Voter.turnout, '<br/>',
'Parties: ', italy$Party
) %>%
lapply(htmltools::HTML)
})
pal <- reactive({
pal <- colorNumeric(palette = 'YlOrRd',domain = italy$Voter.turnout)
})
output$map <- renderLeaflet({
leaflet() %>%
addPolygons(
data = output$italyTable,
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels
)
})
}
shinyApp(ui, server)
# TODO - Change hard coded min max values
italy2 <- italy %>%
filter(Year == 2018, House == 'Chamber')
ui <- fluidPage(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = 1948:2008
),
DT::dataTableOutput("italyTable"),
leafletOutput('map'),
)
#input$year_sel
server <- function(input, output, session) {
# Filtering
#italy <- reactive({
#  italy <- italy %>%
#    filter(Year == 2018, House == 'Chamber')
#})
output$italyTable = DT::renderDataTable({
italy2
})
# Label for individual regions
reg_labels <- reactive({
reg_labels <- paste(
'<strong>Region: ', italy$Region, '</strong><br/>',
'Voter turnout: ', italy$Voter.turnout, '<br/>',
'Parties: ', italy$Party
) %>%
lapply(htmltools::HTML)
})
pal <- reactive({
pal <- colorNumeric(palette = 'YlOrRd',domain = italy$Voter.turnout)
})
output$map <- renderLeaflet({
leaflet() %>%
addPolygons(
data = output$italyTable,
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels
)
})
}
shinyApp(ui, server)
