theme_minimal() +
theme(
axis.text.x = element_text(angle = 60, hjust = 1),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "grey", fill = NA)
) +
transition_reveal(heartbeat) +
ease_aes("linear") +
enter_fade() +
exit_fade()
heartbeat
coll_years_anim
list_coll_grouped <- list_coll_percent  %>%
filter(!(grepl('Syncretic', Collocation) & (Year < 2013))) %>%
mutate(Collocation =
ifelse(
grepl('Left', Collocation),
'Left',
ifelse(
grepl('Right', Collocation),
'Right',
Collocation
)
)
) %>%
group_by(Year,House,Collocation) %>%
summarise_all(sum)
# Soulution for controlling plot "heartbeat" found at:
# (https://stackoverflow.com/questions/53092216/any-way-to-pause-at-specific-frames-time-points-with-transition-reveal-in-gganim)
heartbeat <- list_coll_grouped %>%
group_by(House, Year, Collocation) %>%
mutate(show_time = case_when(Year %in% c(1976) ~ 10,
TRUE           ~ 1),
reveal_time = cumsum(show_time)) %>%
ungroup()
coll_years_anim <- ggplot(
list_coll_grouped,
aes(x=Year, y=Percent, color=Collocation)) +
ggtitle("Collocation of top parties") +
geom_line() +
geom_point() +
geom_text(aes(x = Year + 1, label = Collocation), hjust = 0) +
scale_x_continuous(breaks=election_years) +
scale_color_brewer(palette = "Set2") +
ylab('% of votes') +
facet_grid(vars(House)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 60, hjust = 1),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "grey", fill = NA)
) +
transition_reveal(heartbeat) +
ease_aes("linear") +
enter_fade() +
exit_fade()
heartbeat
coll_years_anim
list_coll_grouped <- list_coll_percent  %>%
filter(!(grepl('Syncretic', Collocation) & (Year < 2013))) %>%
mutate(Collocation =
ifelse(
grepl('Left', Collocation),
'Left',
ifelse(
grepl('Right', Collocation),
'Right',
Collocation
)
)
) %>%
group_by(Year,House,Collocation) %>%
summarise_all(sum)
# Soulution for controlling plot "heartbeat" found at:
# (https://stackoverflow.com/questions/53092216/any-way-to-pause-at-specific-frames-time-points-with-transition-reveal-in-gganim)
heartbeat <- list_coll_grouped %>%
group_by(House, Year, Collocation) %>%
mutate(show_time = case_when(Year %in% c(1976) ~ 10,
TRUE           ~ 1),
reveal_time = cumsum(show_time)) %>%
ungroup()
coll_years_anim <- ggplot(
list_coll_grouped,
aes(x=Year, y=Percent, color=Collocation)) +
ggtitle("Collocation of top parties") +
geom_line() +
geom_point() +
geom_text(aes(x = Year + 1, label = Collocation), hjust = 0) +
scale_x_continuous(breaks=election_years) +
scale_color_brewer(palette = "Set2") +
ylab('% of votes') +
facet_grid(vars(House)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 60, hjust = 1),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "grey", fill = NA)
) +
transition_reveal(heartbeat) +
ease_aes("linear") +
enter_fade() +
exit_fade()
heartbeat
coll_years_anim
list_coll_grouped <- list_coll_percent  %>%
filter(!(grepl('Syncretic', Collocation) & (Year < 2013))) %>%
mutate(Collocation =
ifelse(
grepl('Left', Collocation),
'Left',
ifelse(
grepl('Right', Collocation),
'Right',
Collocation
)
)
) %>%
group_by(Year,House,Collocation) %>%
summarise_all(sum)
# Soulution for controlling plot "heartbeat" found at:
# (https://stackoverflow.com/questions/53092216/any-way-to-pause-at-specific-frames-time-points-with-transition-reveal-in-gganim)
heartbeat <- list_coll_grouped %>%
group_by(House, Year, Collocation) %>%
mutate(show_time = case_when(Year %in% c(1976) ~ 10,
TRUE           ~ 1),
reveal_time = cumsum(show_time)) %>%
ungroup()
coll_years_anim <- ggplot(
list_coll_grouped,
aes(x=Year, y=Percent, color=Collocation)) +
ggtitle("Collocation of top parties") +
geom_line() +
geom_point() +
geom_text(aes(x = Year + 1, label = Collocation), hjust = 0) +
scale_x_continuous(breaks=election_years) +
scale_color_brewer(palette = "Set2") +
ylab('% of votes') +
facet_grid(vars(House)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 60, hjust = 1),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "grey", fill = NA)
) +
transition_reveal(heartbeat$reveal_time) +
ease_aes("linear") +
enter_fade() +
exit_fade()
heartbeat
coll_years_anim
list_coll_grouped <- list_coll_percent  %>%
filter(!(grepl('Syncretic', Collocation) & (Year < 2013))) %>%
mutate(Collocation =
ifelse(
grepl('Left', Collocation),
'Left',
ifelse(
grepl('Right', Collocation),
'Right',
Collocation
)
)
) %>%
group_by(Year,House,Collocation) %>%
summarise_all(sum)
# Soulution for controlling plot "heartbeat" found at:
# (https://stackoverflow.com/questions/53092216/any-way-to-pause-at-specific-frames-time-points-with-transition-reveal-in-gganim)
heartbeat <- list_coll_grouped %>%
group_by(House, Year, Collocation) %>%
mutate(show_time = case_when(Year %in% c(1976) ~ 10,
TRUE           ~ 1),
reveal_time = cumsum(show_time)) %>%
ungroup()
coll_years_anim <- ggplot(
heartbeat,
aes(x=Year, y=Percent, color=Collocation)) +
ggtitle("Collocation of top parties") +
geom_line() +
geom_point() +
geom_text(aes(x = Year + 1, label = Collocation), hjust = 0) +
scale_x_continuous(breaks=election_years) +
scale_color_brewer(palette = "Set2") +
ylab('% of votes') +
facet_grid(vars(House)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 60, hjust = 1),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "grey", fill = NA)
) +
transition_reveal(heartbeat) +
ease_aes("linear") +
enter_fade() +
exit_fade()
heartbeat
coll_years_anim
list_coll_grouped <- list_coll_percent  %>%
filter(!(grepl('Syncretic', Collocation) & (Year < 2013))) %>%
mutate(Collocation =
ifelse(
grepl('Left', Collocation),
'Left',
ifelse(
grepl('Right', Collocation),
'Right',
Collocation
)
)
) %>%
group_by(Year,House,Collocation) %>%
summarise_all(sum)
# Soulution for controlling plot "heartbeat" found at:
# (https://stackoverflow.com/questions/53092216/any-way-to-pause-at-specific-frames-time-points-with-transition-reveal-in-gganim)
heartbeat <- list_coll_grouped %>%
group_by(House, Year, Collocation) %>%
mutate(show_time = case_when(Year %in% c(1976) ~ 10,
TRUE           ~ 1),
reveal_time = cumsum(show_time)) %>%
ungroup()
coll_years_anim <- ggplot(
heartbeat,
aes(x=Year, y=Percent, color=Collocation)) +
ggtitle("Collocation of top parties") +
geom_line() +
geom_point() +
geom_text(aes(x = Year + 1, label = Collocation), hjust = 0) +
scale_x_continuous(breaks=election_years) +
scale_color_brewer(palette = "Set2") +
ylab('% of votes') +
facet_grid(vars(House)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 60, hjust = 1),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "grey", fill = NA)
) +
transition_reveal(reveal_time) +
ease_aes("linear") +
enter_fade() +
exit_fade()
heartbeat
coll_years_anim
list_coll_grouped <- list_coll_percent  %>%
filter(!(grepl('Syncretic', Collocation) & (Year < 2013))) %>%
mutate(Collocation =
ifelse(
grepl('Left', Collocation),
'Left',
ifelse(
grepl('Right', Collocation),
'Right',
Collocation
)
)
) %>%
group_by(Year,House,Collocation) %>%
summarise_all(sum)
# Soulution for controlling plot "heartbeat" found at:
# (https://stackoverflow.com/questions/53092216/any-way-to-pause-at-specific-frames-time-points-with-transition-reveal-in-gganim)
heartbeat <- list_coll_grouped %>%
group_by(House, Year, Collocation) %>%
mutate(show_time = case_when(Year %in% c(1976) ~ 10,
TRUE           ~ 1),
reveal_time = cumsum(show_time)) %>%
ungroup()
coll_years_anim <- ggplot(
heartbeat,
aes(x=Year, y=Percent, group=c(House,Year,Collocation) color=Collocation)) +
list_coll_grouped <- list_coll_percent  %>%
filter(!(grepl('Syncretic', Collocation) & (Year < 2013))) %>%
mutate(Collocation =
ifelse(
grepl('Left', Collocation),
'Left',
ifelse(
grepl('Right', Collocation),
'Right',
Collocation
)
)
) %>%
group_by(Year,House,Collocation) %>%
summarise_all(sum)
# Soulution for controlling plot "heartbeat" found at:
# (https://stackoverflow.com/questions/53092216/any-way-to-pause-at-specific-frames-time-points-with-transition-reveal-in-gganim)
heartbeat <- list_coll_grouped %>%
group_by(House, Year, Collocation) %>%
mutate(show_time = case_when(Year %in% c(1976) ~ 10,
TRUE           ~ 1),
reveal_time = cumsum(show_time)) %>%
ungroup()
coll_years_anim <- ggplot(
heartbeat,
aes(x=Year, y=Percent, group=c(House,Year,Collocation), color=Collocation)) +
ggtitle("Collocation of top parties") +
geom_line() +
geom_point() +
geom_text(aes(x = Year + 1, label = Collocation), hjust = 0) +
scale_x_continuous(breaks=election_years) +
scale_color_brewer(palette = "Set2") +
ylab('% of votes') +
facet_grid(vars(House)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 60, hjust = 1),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "grey", fill = NA)
) +
transition_reveal(reveal_time) +
ease_aes("linear") +
enter_fade() +
exit_fade()
heartbeat
coll_years_anim
list_coll_grouped <- list_coll_percent  %>%
filter(!(grepl('Syncretic', Collocation) & (Year < 2013))) %>%
mutate(Collocation =
ifelse(
grepl('Left', Collocation),
'Left',
ifelse(
grepl('Right', Collocation),
'Right',
Collocation
)
)
) %>%
group_by(Year,House,Collocation) %>%
summarise_all(sum)
# Soulution for controlling plot "heartbeat" found at:
# (https://stackoverflow.com/questions/53092216/any-way-to-pause-at-specific-frames-time-points-with-transition-reveal-in-gganim)
coll_years_anim <- ggplot(
list_coll_grouped,
aes(x=Year, y=Percent, color=Collocation)) +
ggtitle("Collocation of top parties") +
geom_line() +
geom_point() +
geom_text(aes(x = Year + 1, label = Collocation), hjust = 0) +
scale_x_continuous(breaks=election_years) +
scale_color_brewer(palette = "Set2") +
ylab('% of votes') +
facet_grid(vars(House)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 60, hjust = 1),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "grey", fill = NA)
) +
transition_reveal(Year) +
ease_aes("linear") +
enter_fade() +
exit_fade()
coll_years_anim
list_coll_grouped
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = election_years
),
selectInput(
inputId =  'house_sel',
label = "Select house:",
choices = c('Chamber', 'Senate')
),
selectInput(
inputId =  'shape_sel',
label = 'Select shape:',
choices = c('Regions', 'Voters', 'Both')
),
selectInput(
inputId = 'fill_sel',
label = 'Select fill color:',
choices = c('Voter turnout', 'Top party collocation')
)
),
mainPanel(
leafletOutput('map')
)
),
fluidRow(infoBoxOutput('nat_info'))
)
server <- function(input, output, session) {
# Filtering
italy_React <- reactive({
italy %>% filter(Year == input$year_sel, House == input$house_sel)
})
ballot_React <- reactive({
ballot_it %>% filter(Year == input$year_sel, House == input$house_sel)
})
aggregate_list_React <- reactive({
aggregate_list_it %>% filter(Year == input$year_sel, House == input$house_sel)
})
pal <- reactive({
if(input$fill_sel == 'Voter turnout') {
colorNumeric(palette = 'YlOrRd',domain = italy_React()$Voter.turnout)
}
else if(input$fill_sel == 'Top party collocation') {
colorFactor(viridis(7), italy_React()$Collocation)
}
})
# Label for individual regions
reg_labels <- reactive({
reg_labels <- paste(
'<strong>Region: ', italy_React()$Region, '</strong><br/>',
'Voter turnout: ', italy_React()$Voter.turnout, '<br/>',
'Parties: ', italy_React()$Party
) %>%
lapply(htmltools::HTML)
})
output$nat_info <- renderInfoBox({
infoBox(
paste(
'Voter turnout: ',
ballot_React()$Voter.turnout,
'<br/>',
'Parties: ',
aggregate_list_React()$Party
) %>%
lapply(htmltools::HTML)
)
})
fillCol <- reactive({
#Fill column
if(input$fill_sel == 'Voter turnout') {
italy_React()$Voter.turnout
}
else if(input$fill_sel == 'Top party collocation') {
italy_React()$Collocation
}
})
map_data <- reactive({
if(input$shape_sel == 'Regions') {
m <- leaflet(italy_React()) %>%
addPolygons(
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels(),
highlightOptions = highlightOptions(color = "grey", weight = 3, bringToFront = TRUE),
fillColor = ~pal()(fillCol()))
}
else if(input$shape_sel == 'Voters') {
m <- leaflet(italy_React()) %>%
addCircleMarkers(
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels(),
italy_React()$centroid_lat,
italy_React()$centroid_long,
radius = sqrt(italy_React()$Voters/10000),
fillColor = ~pal()(fillCol()))
}
else{
m <- leaflet(italy_React()) %>%
addPolygons(
stroke = TRUE,
color = 'Grey',
weight = 1.5) %>%
addCircleMarkers(
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels(),
italy_React()$centroid_lat,
italy_React()$centroid_long,
radius = sqrt(italy_React()$Voters/10000),
fillColor = ~pal()(fillCol()))
}
})
output$map <- renderLeaflet({
map_data() %>%
addLegend(
pal = pal(),
values = fillCol(),
opacity = 0.7,
position = 'bottomright')
})
}
shinyApp(ui, server)
# Voter turnout trend
ggplot(ballot_it, aes(x=Year, y=Voter.turnout, color=House)) +
ggtitle("Voter turnout") +
geom_line() +
geom_point() +
expand_limits(y=c(50, 100)) +
scale_x_continuous(breaks=election_years) +
scale_color_brewer(palette = "Set2") +
ylab('Voter turnout') +
facet_grid(vars(House)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
#geom_text_repel(aes(x=1948, label = 'Hello'))
