'<strong>Region: ', italy_React()$Region, '</strong><br/>',
'Voter turnout: ', italy_React()$Voter.turnout, '<br/>',
'Parties: ', italy_React()$Party
) %>%
lapply(htmltools::HTML)
})
output$map <- renderLeaflet({
leaflet() %>%
addPolygons(
data = italy_React(),
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels(),
fillColor = ~pal()(italy_React()$Voter.turnout),
highlightOptions = highlightOptions(color = "grey", weight = 3, bringToFront = TRUE)) %>%
addLegend(
pal = pal(),
values = italy_React()$Voter.turnout,
opacity = 0.7,
title = 'Voter Turnout',
position = 'bottomright')
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = election_years
),
selectInput(
inputId =  'house_sel',
label = "Select house:",
choices = c('Chamber', 'Senate')
),
leafletOutput('map')
)
server <- function(input, output, session) {
# Filtering
italy_React <- reactive({
italy %>% filter(Year == input$year_sel, House == input$house_sel)
})
pal <- reactive({
colorNumeric(palette = 'YlOrRd',domain = italy_React()$Voter.turnout)
})
# Label for individual regions
reg_labels <- reactive({
reg_labels <- paste(
'<strong>Region: ', italy_React()$Region, '</strong><br/>',
'Voter turnout: ', italy_React()$Voter.turnout, '<br/>',
'Parties: ', italy_React()$Party
) %>%
lapply(htmltools::HTML)
})
output$map <- renderLeaflet({
leaflet() %>%
addPolygons(
data = italy_React(),
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels(),
fillColor = ~pal()(italy_React()$Voter.turnout),
highlightOptions = highlightOptions(color = "grey", weight = 3, bringToFront = TRUE)) %>%
addLegend(
pal = pal(),
values = italy_React()$Voter.turnout,
opacity = 0.7,
title = 'Voter Turnout',
position = 'bottomright')
})
}
shinyApp(ui, server)
aggregate_list_it
ui <- fluidPage(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = election_years
),
selectInput(
inputId =  'house_sel',
label = "Select house:",
choices = c('Chamber', 'Senate')
),
infoBoxOutput('nat_info'),
leafletOutput('map')
)
ui <- fluidPage(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = election_years
),
selectInput(
inputId =  'house_sel',
label = "Select house:",
choices = c('Chamber', 'Senate')
),
fluidRow(infoBoxOutput('nat_info')),
leafletOutput('map')
)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(rnaturalearth)
library(rgeos)
library(leaflet)
library(shiny)
library(shinydashboard)
install.packages("shinydashboard")
library(tidyverse)
library(ggplot2)
library(dplyr)
library(rnaturalearth)
library(rgeos)
library(leaflet)
library(shiny)
library(shinydashboard)
`%notin%` <- Negate(`%in%`)
election_years <- c(1948, 1953, 1958, 1963, 1968, 1972, 1976, 1979, 1983, 1987, 1992, 1994, 1996, 2001, 2006, 2008, 2013, 2018)
ui <- fluidPage(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = election_years
),
selectInput(
inputId =  'house_sel',
label = "Select house:",
choices = c('Chamber', 'Senate')
),
fluidRow(infoBoxOutput('nat_info')),
leafletOutput('map')
)
server <- function(input, output, session) {
# Filtering
italy_React <- reactive({
italy %>% filter(Year == input$year_sel, House == input$house_sel)
})
ballot_React <- reactive({
ballot_it %>% filter(Year == input$year_sel, House == input$house_sel)
})
pal <- reactive({
colorNumeric(palette = 'YlOrRd',domain = italy_React()$Voter.turnout)
})
# Label for individual regions
reg_labels <- reactive({
reg_labels <- paste(
'<strong>Region: ', italy_React()$Region, '</strong><br/>',
'Voter turnout: ', italy_React()$Voter.turnout, '<br/>',
'Parties: ', italy_React()$Party
) %>%
lapply(htmltools::HTML)
})
output$nat_info <- renderInfoBox({
infoBox(
paste(
'Voter turnout: ',
ballot_React()$Voter.turnout,
'<br/>',
'Parties: ',
aggregate_list_it$Party
) %>%
lapply(htmltools::HTML)
)
})
output$map <- renderLeaflet({
leaflet() %>%
addPolygons(
data = italy_React(),
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels(),
fillColor = ~pal()(italy_React()$Voter.turnout),
highlightOptions = highlightOptions(color = "grey", weight = 3, bringToFront = TRUE)) %>%
addLegend(
pal = pal(),
values = italy_React()$Voter.turnout,
opacity = 0.7,
title = 'Voter Turnout',
position = 'bottomright')
})
}
shinyApp(ui, server)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(rnaturalearth)
library(rgeos)
library(leaflet)
library(shiny)
library(shinydashboard)
`%notin%` <- Negate(`%in%`)
election_years <- c(1948, 1953, 1958, 1963, 1968, 1972, 1976, 1979, 1983, 1987, 1992, 1994, 1996, 2001, 2006, 2008, 2013, 2018)
# TODO - ballot_chamber_it, "Valle d'aosta" contains an NA value for "Schede.non.valide" in 2013, for now we are going to count that value as zero
# National data (no region granularity)
ballot_senate_it <- read.csv(
"./source/elections/italy/ballots-Senate.csv",
header = TRUE,
sep = ";"
)
ballot_chamber_it <- read.csv(
"./source/elections/italy/ballots-Chamber.csv",
header = TRUE,
sep = ";"
)
list_senate_it <- read.csv(
"./source/elections/italy/lists-Senate.csv",
header = TRUE,
sep = ";"
)
list_chamber_it <- read.csv(
"./source/elections/italy/lists-Chamber.csv",
header = TRUE,
sep = ";"
)
# Data with region granularity (No votes coming from outside of Italy)
ballot_senate_reg <- read.csv(
"./source/elections/regions/ballots-Senate-Reg.csv",
header = TRUE,
sep = ";"
)
ballot_chamber_reg <- read.csv(
"./source/elections/regions/ballots-Chamber-Reg.csv",
header = TRUE,
sep = ";"
)
list_senate_reg <- read.csv(
"./source/elections/regions/lists-Senate-Reg.csv",
header = TRUE,
sep = ";"
)
list_chamber_reg <- read.csv(
"./source/elections/regions/lists-Chamber-Reg.csv",
header = TRUE,
sep = ";"
)
# Adding id column
ballot_senate_it <- ballot_senate_it %>% add_column(House = "Senate")
ballot_chamber_it <- ballot_chamber_it %>% add_column(House = "Chamber")
list_senate_it <- list_senate_it %>% add_column(House = "Senate")
list_chamber_it <- list_chamber_it %>% add_column(House = "Chamber")
ballot_senate_reg <- ballot_senate_reg %>% add_column(House = "Senate")
ballot_chamber_reg <- ballot_chamber_reg %>% add_column(House = "Chamber")
list_senate_reg <- list_senate_reg %>% add_column(House = "Senate")
list_chamber_reg <- list_chamber_reg %>% add_column(House = "Chamber")
# Joining
ballot_it <- full_join(
ballot_senate_it,
ballot_chamber_it
)
list_it <- full_join(
list_senate_it,
list_chamber_it
)
ballot_reg <- full_join(
ballot_senate_reg,
ballot_chamber_reg
)
list_reg <- full_join(
list_senate_reg,
list_chamber_reg
)
# Translating column names
colnames(ballot_it) <- c("Region", "Constituents", "Voters", "Empty.votes", "Null.votes", "Year", "House")
colnames(list_it) <- c("Region", "Party", "Votes", "Year", "House")
colnames(ballot_reg) <- c("Region", "Constituents", "Voters", "Empty.votes", "Null.votes", "Year", "House")
colnames(list_reg) <- c("Region", "Party", "Votes", "Year", "House")
# We can group all lines that have the same year, house (and party for lists)
# We don't care if votes come from within our outside the country (Region column)
# We can also drop columns indicating empty (Schede.bianche) or invalid (Schede.non.valide) votes
# A new column indicating the voter turnout is also added
ballot_it <- ballot_it %>%
subset(select = -c(Region, Empty.votes, Null.votes)) %>%
group_by(Year, House) %>%
summarise_all(sum) %>%
mutate(Voter.turnout = as.numeric(format(round((Voters / Constituents) * 100, 1), nsmall = 1)))
list_it <- list_it %>%
subset(select = -Region) %>%
group_by(Year, House, Party) %>%
summarise_all(sum)
# We want to "standardize" region names for both regional lists and ballots
# Trim trailing whitespaces
ballot_reg$Region <- trimws(
ballot_reg$Region,
which = "r"
)
# For certain years, region are divided into "zones" (e.g. CAMPANIA 1, CAMPANIA 2, ...). We should remove the trailing integers
ballot_reg$Region <- sub(
"\\s\\d+$",
"",
ballot_reg$Region
)
# We can now group by region, year and house standardize names for regions in which is not constant throughout the whole dataset
ballot_reg <- ballot_reg %>%
subset(select = -c(Empty.votes, Null.votes)) %>%
group_by(Region, Year, House) %>%
summarise_all(sum) %>%
mutate(Voter.turnout = as.numeric(format(round((Voters / Constituents) * 100, 1), nsmall = 1))) %>%
mutate(
Region = str_to_upper(Region), Region = case_when(
Region == "ABRUZZI" ~ "ABRUZZO",
Region == "TRENTINO-ALTO ADIGE/SUDTIROL" ~ "TRENTINO ALTO ADIGE",
Region == "TRENTINO-ALTO ADIGE" ~ "TRENTINO ALTO ADIGE",
Region == "FRIULI VENEZIA GIULIA" ~ "FRIULI-VENEZIA GIULIA",
Region == "EMILIA-ROMAGNA" ~ "EMILIA ROMAGNA",
Region == "VALLE D'AOSTA -" ~ "VALLE D'AOSTA",
Region == "VALLE D'AOSTA-" ~ "VALLE D'AOSTA",
TRUE ~ Region
)
)
list_reg$Region <- trimws(
list_reg$Region,
which = "r"
)
list_reg$Region <- sub(
"\\s\\d+$",
"",
list_reg$Region
)
list_reg <- list_reg %>%
group_by(Region, Year, House, Party) %>%
summarise_all(sum) %>%
mutate(
Region = str_to_upper(Region), Region = case_when(
Region == "ABRUZZI" ~ "ABRUZZO",
Region == "TRENTINO-ALTO ADIGE/SUDTIROL" ~ "TRENTINO ALTO ADIGE",
Region == "TRENTINO-ALTO ADIGE" ~ "TRENTINO ALTO ADIGE",
Region == "FRIULI VENEZIA GIULIA" ~ "FRIULI-VENEZIA GIULIA",
Region == "EMILIA-ROMAGNA" ~ "EMILIA ROMAGNA",
Region == "VALLE D'AOSTA -" ~ "VALLE D'AOSTA",
Region == "VALLE D'AOSTA-" ~ "VALLE D'AOSTA",
TRUE ~ Region
)
)
ballot_reg
ballot_it
list_it_top <- list_it %>%
group_by(Year, House) %>%
filter(quantile(Votes, 0.7)<Votes)
list_reg_top <- list_reg %>%
group_by(Region, Year, House) %>%
filter(quantile(Votes, 0.7)<Votes)
list_it_top
list_reg_top
empl_rate_raw <- read.csv(
"./source/labour/employment-rate.csv",
header = TRUE,
sep = ","
)
head(empl_rate_raw)
# Drop
empl_rate <- empl_rate_raw %>%
subset(select = -c(ITTER107, TIPO_DATO_FOL, SEXISTAT1, ETA1, TITOLO_STUDIO, TIME, Tipo.dato, Flag.Codes, Flags))
# Translate
colnames(empl_rate) <- c("Region", "Sex", "Age", "Education.level", "Year", "Value")
macro_regions <- c("Nord", "Nord-ovest", "Nord-est", "Centro", "Mezzogiorno")
#All quarterly values for the year column contain letters. We filter them out by trying to convert to integer and then checking if the resul is Na
empl_rate <- empl_rate %>%
filter(
Education.level == "totale" &
Sex == "totale" &
Age == "15-64 anni" &
!is.na(as.numeric(Year)) &
Region %notin% macro_regions
) %>%
subset(select = -c(Education.level, Sex, Age))
empl_rate_it <- empl_rate %>%
filter(Region == 'Italia') %>%
subset(select = -Region)
empl_rate_reg <- empl_rate %>%
filter(Region != 'Italia')
empl_rate_reg
# TODO - Abruzzi e Molise
italy <- ne_states(country="Italy", returnclass="sf") %>%
rename(Region = region) %>%
group_by(Region) %>%
summarise() %>%
mutate(
Region = str_to_upper(Region),
Region = case_when(
Region == 'APULIA' ~ 'PUGLIA',
Region == 'SICILY' ~ 'SICILIA',
Region == 'TRENTINO-ALTO ADIGE' ~ 'TRENTINO ALTO ADIGE',
Region == 'EMILIA-ROMAGNA' ~ 'EMILIA ROMAGNA',
TRUE ~ Region
)
)
# Building aggregate lists
aggregate_list_it <- list_it_top %>%
group_by(Year, House) %>%
arrange(-Votes) %>%
mutate(Party = paste(Party, Votes, sep = ':', collapse = '<br/>')) %>%
subset(select = -c(Votes)) %>%
distinct(Year, House, Party)
aggregate_list_reg <- list_reg_top %>%
group_by(Year, Region, House) %>%
arrange(-Votes) %>%
mutate(Party = paste(Party, Votes, sep = ':', collapse = '<br/>')) %>%
subset(select = -c(Votes)) %>%
distinct(Region, Year, House, Party)
# Contains geom data + regional data for both lists and ballots
italy <- italy %>%
inner_join(ballot_reg, by='Region') %>%
inner_join(aggregate_list_reg, by=c('Region', 'Year', 'House'))
# Filtering
italy_filtered <- italy %>%
filter(Year == 2018, House == 'Chamber')
ballot_it_filtered <- ballot_it %>%
filter(Year == 2018, House == 'Chamber')
# Label for bottom-right persistent legend
it_labels <- paste(
'Voter turnout: ',
ballot_it_filtered$Voter.turnout,
'<br/>',
'Parties: ',
aggregate_list_it$Party
) %>%
lapply(htmltools::HTML)
# Label for individual regions
reg_labels <- paste(
'<strong>Region: ', italy_filtered$Region, '</strong><br/>',
'Voter turnout: ', italy_filtered$Voter.turnout, '<br/>',
'Parties: ', italy_filtered$Party
) %>%
lapply(htmltools::HTML)
pal <- colorNumeric(palette = 'YlOrRd',domain = italy_filtered$Voter.turnout)
leaflet(italy_filtered) %>%
addPolygons(
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels,
fillColor = ~pal(italy_filtered$Voter.turnout),
highlightOptions = highlightOptions(color = "grey", weight = 3, bringToFront = TRUE)
) %>%
addLegend(pal = pal,
values = italy_filtered$Voter.turnout,
opacity = 0.7,
title = 'Voter Turnout',
position = 'bottomright')
ui <- fluidPage(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = election_years
),
selectInput(
inputId =  'house_sel',
label = "Select house:",
choices = c('Chamber', 'Senate')
),
fluidRow(infoBoxOutput('nat_info')),
leafletOutput('map')
)
server <- function(input, output, session) {
# Filtering
italy_React <- reactive({
italy %>% filter(Year == input$year_sel, House == input$house_sel)
})
ballot_React <- reactive({
ballot_it %>% filter(Year == input$year_sel, House == input$house_sel)
})
aggregate_list_React <- reactive({
aggregate_list_it %>% filter(Year == input$year_sel, House == input$house_sel)
})
pal <- reactive({
colorNumeric(palette = 'YlOrRd',domain = italy_React()$Voter.turnout)
})
# Label for individual regions
reg_labels <- reactive({
reg_labels <- paste(
'<strong>Region: ', italy_React()$Region, '</strong><br/>',
'Voter turnout: ', italy_React()$Voter.turnout, '<br/>',
'Parties: ', italy_React()$Party
) %>%
lapply(htmltools::HTML)
})
output$nat_info <- renderInfoBox({
infoBox(
paste(
'Voter turnout: ',
ballot_React()$Voter.turnout,
'<br/>',
'Parties: ',
aggregate_list_React()$Party
) %>%
lapply(htmltools::HTML)
)
})
output$map <- renderLeaflet({
leaflet() %>%
addPolygons(
data = italy_React(),
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels(),
fillColor = ~pal()(italy_React()$Voter.turnout),
highlightOptions = highlightOptions(color = "grey", weight = 3, bringToFront = TRUE)) %>%
addLegend(
pal = pal(),
values = italy_React()$Voter.turnout,
opacity = 0.7,
title = 'Voter Turnout',
position = 'bottomright')
})
}
shinyApp(ui, server)
