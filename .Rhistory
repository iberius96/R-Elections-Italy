aggregate_list_reg <- list_reg_top %>%
group_by(Year, Region, House) %>%
arrange(-Votes) %>%
mutate(
Party = paste(Party, formatC(Votes, format="f", big.mark = ",", digits=0), sep = ":", collapse = "<br/>"),
Collocation = first(Collocation)
) %>%
subset(select = -c(Votes)) %>%
distinct(Region, Year, House, Party, Collocation)
aggregate_list_it
aggregate_list_reg
# Contains geom data + regional data for both lists and ballots
italy <- italy %>%
inner_join(ballot_reg, by="Region") %>%
inner_join(aggregate_list_reg, by=c("Region", "Year", "House"))
italy
# Filtering
italy_filtered <- italy %>%
filter(Year == max(italy$Year), House == "Chamber")
ballot_it_filtered <- ballot_it %>%
filter(Year == max(italy$Year), House == "Chamber")
# Label for individual regions
reg_labels <- paste(
"<strong>Region: ", italy_filtered$Region, "</strong><br/>",
"Voter turnout: ", italy_filtered$Voter.turnout, "%<br/>",
"Parties:<br/>", italy_filtered$Party
) %>%
lapply(htmltools::HTML)
pal <- colorNumeric(palette = "RdYlGn",domain = italy_filtered$Voter.turnout)
leaflet(italy_filtered) %>%
addPolygons(
stroke = TRUE,
color = "Grey",
weight = 1.5,
label = reg_labels,
fillColor = ~pal(italy_filtered$Voter.turnout),
highlightOptions = highlightOptions(color = "grey", weight = 3, bringToFront = TRUE)
) %>%
addLegend(pal = pal,
values = italy_filtered$Voter.turnout,
opacity = 0.7,
title = "Voter Turnout",
position = "bottomright",
labFormat = labelFormat(suffix = "%"))
# Filtering
italy_filtered <- italy %>%
filter(Year == max(italy$Year), House == "Chamber")
ballot_it_filtered <- ballot_it %>%
filter(Year == max(italy$Year), House == "Chamber")
# Label for individual regions
reg_labels <- paste(
"<strong>Region: ", italy_filtered$Region, "</strong><br/>",
"Voter turnout: ", italy_filtered$Voter.turnout, "%<br/>",
"Parties:<br/>", italy_filtered$Party
) %>%
lapply(htmltools::HTML)
pal <- colorNumeric(palette = "RdYlGn",domain = italy_filtered$Voter.turnout)
leaflet(italy_filtered) %>%
addPolygons(
stroke = TRUE,
color = "Grey",
weight = 1.5,
label = reg_labels,
fillColor = ~pal(italy_filtered$Voter.turnout),
highlightOptions = highlightOptions(color = "grey", weight = 3, bringToFront = TRUE)
) %>%
addLegend(pal = pal,
values = italy_filtered$Voter.turnout,
opacity = 0.7,
title = "Voter Turnout",
position = "bottomright",
labFormat = labelFormat(suffix = "%"))
palColl <- colorFactor("Set2", domain=c("Far-Left","Left","Centre-Left","Centre","Syncretic","Centre-Right","Right","Far-Right"))
collLabels <- unique(italy$Collocation)
leaflet(italy_filtered) %>%
addPolygons(
stroke = TRUE,
color = "Grey",
weight = 1.5,
label = reg_labels,
fillColor = ~palColl(italy_filtered$Collocation),
highlightOptions = highlightOptions(color = "grey", weight = 3, bringToFront = TRUE)
) %>%
addLegend(pal = palColl,
values = collLabels,
opacity = 0.7,
title = "Top party collocation",
position = "bottomright")
leaflet(italy_filtered) %>%
addCircleMarkers(
stroke = TRUE,
color = "Grey",
weight = 1.5,
label = reg_labels,
italy_filtered$centroid_lat,
italy_filtered$centroid_long,
radius = sqrt(italy_filtered$Voters/10000),
fillColor = ~pal(italy_filtered$Voter.turnout)
) %>%
addLegend(pal = pal,
values = italy_filtered$Voter.turnout,
opacity = 0.7,
title = "Voter Turnout",
position = "bottomright",
labFormat = labelFormat(suffix = "%"))
ui <- fluidPage(
titlePanel(title=h4("Electoral data", align="center")),
sidebarLayout(
sidebarPanel(
selectInput(
inputId =  "year_sel",
label = "Select year:",
choices = election_years
),
selectInput(
inputId =  "house_sel",
label = "Select house:",
choices = c("Chamber", "Senate")
),
selectInput(
inputId =  "shape_sel",
label = "Select shape:",
choices = c("Regions", "Voters", "Both")
),
selectInput(
inputId = "fill_sel",
label = "Select fill color:",
choices = c("Voter turnout", "Top party collocation")
)
),
mainPanel(
leafletOutput("map"),
fluidRow(infoBoxOutput("nat_info"))
),
)
)
server <- function(input, output) {
# Filtering
italy_React <- reactive({
italy %>% filter(Year == input$year_sel, House == input$house_sel)
})
ballot_React <- reactive({
ballot_it %>% filter(Year == input$year_sel, House == input$house_sel)
})
aggregate_list_React <- reactive({
aggregate_list_it %>% filter(Year == input$year_sel, House == input$house_sel)
})
pal <- reactive({
if(input$fill_sel == "Voter turnout") {
colorNumeric(
palette = "RdYlGn",
domain = c(min(italy$Voter.turnout), max(italy$Voter.turnout)
)
)
}
else {
colorFactor(
"Set2",
domain=c("Far-Left","Left","Centre-Left","Centre","Syncretic","Centre-Right","Right","Far-Right")
)
}
})
fillCol <- reactive({
#Fill column
if(input$fill_sel == "Voter turnout") {
italy_React()$Voter.turnout
}
else {
italy_React()$Collocation
}
})
# Label for individual regions
reg_labels <- reactive({
reg_labels <- paste(
"<strong>Region: ", italy_React()$Region, "</strong><br/>",
"Voter turnout: ", italy_React()$Voter.turnout, "%<br/>",
"Parties:<br/>", italy_React()$Party
) %>%
lapply(htmltools::HTML)
})
output$nat_info <- renderInfoBox({
infoBox(
paste(
"Voter turnout: ", ballot_React()$Voter.turnout, "%<br/>",
"Parties:<br/>", aggregate_list_React()$Party
) %>%
lapply(htmltools::HTML)
)
})
map_data <- reactive({
if((input$shape_sel == "Regions")) {
m <- leaflet(italy_React()) %>%
addPolygons(
stroke = TRUE,
color = "Grey",
weight = 1.5,
label = reg_labels(),
highlightOptions = highlightOptions(color = "grey", weight = 3, bringToFront = TRUE),
fillColor = ~pal()(fillCol()))
}
else if(input$shape_sel == "Voters") {
m <- leaflet(italy_React()) %>%
addCircleMarkers(
stroke = TRUE,
color = "Grey",
weight = 1.5,
label = reg_labels(),
italy_React()$centroid_lat,
italy_React()$centroid_long,
radius = sqrt(italy_React()$Voters/10000),
fillColor = ~pal()(fillCol()))
}
else{
m <- leaflet(italy_React()) %>%
addPolygons(
stroke = TRUE,
color = "Grey",
weight = 1.5) %>%
addCircleMarkers(
stroke = TRUE,
color = "Grey",
weight = 1.5,
label = reg_labels(),
italy_React()$centroid_lat,
italy_React()$centroid_long,
radius = sqrt(italy_React()$Voters/10000),
fillColor = ~pal()(fillCol()))
}
})
output$map <- renderLeaflet({
if(input$fill_sel == "Voter turnout") {
map_data() %>%
addLegend(
pal = pal(),
values = fillCol(),
opacity = 0.7,
position = "bottomright",
title = "Voter Turnout",
labFormat = labelFormat(suffix = "%"),
)
}
else {
map_data() %>%
addLegend(
pal = pal(),
values = fillCol(),
opacity = 0.7,
position = "bottomright",
title = "Collocation",
)
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel(title=h4("Electoral data", align="center")),
sidebarLayout(
sidebarPanel(
selectInput(
inputId =  "year_sel",
label = "Select year:",
choices = election_years
),
selectInput(
inputId =  "house_sel",
label = "Select house:",
choices = c("Chamber", "Senate")
),
selectInput(
inputId =  "shape_sel",
label = "Select shape:",
choices = c("Regions", "Voters", "Both")
),
selectInput(
inputId = "fill_sel",
label = "Select fill color:",
choices = c("Voter turnout", "Top party collocation")
)
),
mainPanel(
leafletOutput("map"),
fluidRow(infoBoxOutput("nat_info"))
),
)
)
server <- function(input, output) {
# Filtering
italy_React <- reactive({
italy %>% filter(Year == input$year_sel, House == input$house_sel)
})
ballot_React <- reactive({
ballot_it %>% filter(Year == input$year_sel, House == input$house_sel)
})
aggregate_list_React <- reactive({
aggregate_list_it %>% filter(Year == input$year_sel, House == input$house_sel)
})
pal <- reactive({
if(input$fill_sel == "Voter turnout") {
colorNumeric(
palette = "RdYlGn",
domain = c(min(italy$Voter.turnout), max(italy$Voter.turnout)
)
)
}
else {
colorFactor(
"Set2",
domain=c("Far-Left","Left","Centre-Left","Centre","Syncretic","Centre-Right","Right","Far-Right")
)
}
})
fillCol <- reactive({
#Fill column
if(input$fill_sel == "Voter turnout") {
italy_React()$Voter.turnout
}
else {
italy_React()$Collocation
}
})
# Label for individual regions
reg_labels <- reactive({
reg_labels <- paste(
"<strong>Region: ", italy_React()$Region, "</strong><br/>",
"Voter turnout: ", italy_React()$Voter.turnout, "%<br/>",
"Parties:<br/>", italy_React()$Party
) %>%
lapply(htmltools::HTML)
})
output$nat_info <- renderInfoBox({
infoBox(
paste(
"Voter turnout: ", ballot_React()$Voter.turnout, "%<br/>",
"Parties:<br/>", aggregate_list_React()$Party
) %>%
lapply(htmltools::HTML)
)
})
map_data <- reactive({
if((input$shape_sel == "Regions")) {
m <- leaflet(italy_React()) %>%
addPolygons(
stroke = TRUE,
color = "Grey",
weight = 1.5,
label = reg_labels(),
highlightOptions = highlightOptions(color = "grey", weight = 3, bringToFront = TRUE),
fillColor = ~pal()(fillCol()))
}
else if(input$shape_sel == "Voters") {
m <- leaflet(italy_React()) %>%
addCircleMarkers(
stroke = TRUE,
color = "Grey",
weight = 1.5,
label = reg_labels(),
italy_React()$centroid_lat,
italy_React()$centroid_long,
radius = sqrt(italy_React()$Voters/10000),
fillColor = ~pal()(fillCol()))
}
else{
m <- leaflet(italy_React()) %>%
addPolygons(
stroke = TRUE,
color = "Grey",
weight = 1.5) %>%
addCircleMarkers(
stroke = TRUE,
color = "Grey",
weight = 1.5,
label = reg_labels(),
italy_React()$centroid_lat,
italy_React()$centroid_long,
radius = sqrt(italy_React()$Voters/10000),
fillColor = ~pal()(fillCol()))
}
})
output$map <- renderLeaflet({
if(input$fill_sel == "Voter turnout") {
map_data() %>%
addLegend(
pal = pal(),
values = fillCol(),
opacity = 0.7,
position = "bottomright",
title = "Voter Turnout",
labFormat = labelFormat(suffix = "%"),
)
}
else {
map_data() %>%
addLegend(
pal = pal(),
values = fillCol(),
opacity = 0.7,
position = "bottomright",
title = "Collocation",
)
}
})
}
shinyApp(ui, server)
list_it_grouped <- list_it %>%
group_by(Year, House) %>%
summarise(Party = n_distinct(Party))
ggplot(list_it_grouped, aes(x=Year, y=Party, fill=House)) +
ggtitle("Total nr. of parties per election year") +
geom_smooth(method="lm", color="black", se=FALSE, linetype="twodash", size=0.75, show.legend=FALSE, alpha=0.4) +
geom_col(colour="black") +
scale_x_continuous(breaks=election_years) +
scale_fill_brewer(palette = "Set2") +
ylab("Nr. of parties") +
facet_grid(vars(House)) +
theme_bw() +
theme(
axis.text.x = element_text(angle = 60, hjust = 1),
legend.position = "none"
)
list_it_grouped <- list_it %>%
group_by(Year, House) %>%
summarise(Party = n_distinct(Party))
ggplot(list_it_grouped, aes(x=Year, y=Party, fill=House)) +
ggtitle("Total nr. of parties per election year") +
geom_smooth(method="lm", color="black", se=FALSE, linetype="twodash", size=0.75, show.legend=FALSE, alpha=0.4) +
geom_col(colour="black") +
scale_y_continuous(labels=function(x) paste0(x, "%")) +
scale_x_continuous(breaks=election_years) +
scale_fill_brewer(palette = "Set2") +
ylab("Nr. of parties") +
facet_grid(vars(House)) +
theme_bw() +
theme(
axis.text.x = element_text(angle = 60, hjust = 1),
legend.position = "none"
)
senate_seats <- read.csv(
"./source/elections/Senate-seats.csv",
header = TRUE,
sep = ";"
) %>%
subset(select=-House)
senate_seats
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(
inputId =  "year_sel",
label = "Select year:",
choices = election_years
)
),
mainPanel(
plotOutput("seats")
)
)
)
server <- function(input, output, session) {
# Filtering
senate_react <- reactive({
#senate_seats %>% filter(Year == input$year_sel)
senate_seats[senate_seats$Year==input$year_sel,]
})
semicricle_react <- reactive({
senate_react() %>%
parliament_data(type = "semicircle",
parl_rows = 8,
party_seats = senate_react()$Seats)
})
output$seats <- renderPlot({
semicricle_react() %>% ggplot(aes(x=x, y=y, colour=Party)) +
ggtitle("Senate seats") +
geom_parliament_seats() +
theme_ggparliament() +
scale_color_brewer(palette = "Set2")
})
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(
inputId =  "year_sel",
label = "Select year:",
choices = election_years
)
),
mainPanel(
plotOutput("seats")
)
)
)
server <- function(input, output, session) {
# Filtering
senate_react <- reactive({
#senate_seats %>% filter(Year == input$year_sel)
senate_seats[senate_seats$Year==input$year_sel,]
})
semicricle_react <- reactive({
senate_react() %>%
parliament_data(type = "semicircle",
parl_rows = 8,
party_seats = senate_react()$Seats)
})
output$seats <- renderPlot({
semicricle_react() %>% ggplot(aes(x=x, y=y, colour=Party)) +
ggtitle("Senate seats") +
geom_parliament_seats() +
theme_ggparliament()
})
}
shinyApp(ui, server)
