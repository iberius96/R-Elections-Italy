# Filtering
italy_filtered <- italy %>%
filter(Year == 2018, House == 'Chamber')
ballot_it_filtered <- ballot_it %>%
filter(Year == 2018, House == 'Chamber')
# Label for bottom-right persistent legend
it_labels <- paste(
'Voter turnout: ',
ballot_it_filtered$Voter.turnout,
'<br/>',
'Parties: ',
aggregate_list_it$Party
) %>%
lapply(htmltools::HTML)
# Label for individual regions
reg_labels <- paste(
'<strong>Region: ', italy_filtered$Region, '</strong><br/>',
'Voter turnout: ', italy_filtered$Voter.turnout, '<br/>',
'Parties: ', italy_filtered$Party
) %>%
lapply(htmltools::HTML)
pal <- colorNumeric(palette = 'YlOrRd',domain = italy_filtered$Voter.turnout)
leaflet(italy_filtered) %>%
addPolygons(
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels,
fillColor = ~pal(italy_filtered$Voter.turnout),
highlightOptions = highlightOptions(color = "grey", weight = 3, bringToFront = TRUE)
) %>%
addLegend(pal = pal,
values = italy_filtered$Voter.turnout,
opacity = 0.7,
title = 'Voter Turnout',
position = 'bottomright')
palColl <-colorFactor(viridis(7), italy_filtered$collocation)
collLabels <- unique(italy$Collocation)
italy_filtered
leaflet(italy_filtered) %>%
addPolygons(
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels,
fillColor = ~palColl(italy_filtered$Collocation),
highlightOptions = highlightOptions(color = "grey", weight = 3, bringToFront = TRUE)
) %>%
addLegend(pal = palColl,
values = collLabels,
opacity = 0.7,
title = 'Top party collocation',
position = 'bottomright')
leaflet(italy_filtered) %>%
addCircleMarkers(
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels,
italy_filtered$centroid_lat,
italy_filtered$centroid_long,
radius = sqrt(italy_filtered$Voters/10000),
fillColor = ~pal(italy_filtered$Voter.turnout)
) %>%
addLegend(pal = pal,
values = italy_filtered$Voter.turnout,
opacity = 0.7,
title = 'Voter Turnout',
position = 'bottomright')
# Voter turnout trend
ggplot(ballot_it, aes(x=Year, y=Voter.turnout, color=House)) +
ggtitle("Voter turnout trend") +
geom_line() +
geom_point() +
expand_limits(y=c(50, 100)) +
scale_x_continuous(breaks=election_years) +
scale_color_brewer(palette = "Set2") +
ylab('Voter turnout') +
facet_grid(vars(House)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
#geom_text_repel(aes(x=1948, label = 'Hello'))
# Y = Votes, X = years, Bar = divided by consitutents/voters (%)
ggplot(ballots_it) +
ggtitle("Voters/Constituents proportion") +
geom_hline(yintercept=mean(ballots_it$Voters), linetype='dotted')+
geom_col(aes(x=Year, y=Constituents, fill='Constituents'), colour='#000000') +
geom_col(aes(x=Year, y=Voters, fill='Voters'), colour='#000000') +
scale_x_continuous(breaks=election_years) +
scale_y_continuous(labels = scales::unit_format(unit = "M", scale = 1e-6)) +
scale_fill_brewer(palette = "Set2") +
facet_grid(vars(House)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
# Diversity - Total nr of parties voted each election
list_it_grouped <- list_it %>%
group_by(Year, House) %>%
summarise(Party = n_distinct(Party))
ggplot(list_it_grouped, aes(x=Year, y=Party, fill=House)) +
ggtitle("Total parties per election year") +
geom_col(colour='#000000') +
scale_x_continuous(breaks=election_years) +
scale_fill_brewer(palette = "Set2") +
ylab('Total nr. of parties') +
facet_grid(vars(House)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
# Diversity - Total nr of parties voted each election
list_it_grouped <- list_it %>%
group_by(Year, House) %>%
summarise(Party = n_distinct(Party))
ggplot(list_it_grouped, aes(x=Year, y=Party, fill=House)) +
ggtitle("Total parties per election year") +
geom_col(colour='#000000') +
scale_x_continuous(breaks=election_years) +
scale_fill_brewer(palette = "Set2") +
ylab('Total nr. of parties') +
facet_grid(vars(House)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
#Heatmap x=year, y=region, fill=collocation
ggplot(aggregate_list_reg, aes(x=Year,y=Region,fill=Collocation)) +
ggtitle("Top party political collocation") +
geom_tile(colour='#000000') +
scale_x_binned(breaks=election_years) +
scale_fill_brewer(palette = "Set2") +
facet_grid(vars(House)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ui <- fluidPage(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = election_years
),
selectInput(
inputId =  'house_sel',
label = "Select house:",
choices = c('Chamber', 'Senate')
),
selectInput(
inputId =  'shape_sel',
label = 'Select shape:',
choices = c('Regions', 'Voters', 'Both')
),
selectInput(
inputId = 'fill_sel',
label = 'Select fill color:',
choices = c('Voter turnout', 'Top party collocation')
),
leafletOutput('map'),
fluidRow(infoBoxOutput('nat_info'))
)
server <- function(input, output, session) {
# Filtering
italy_React <- reactive({
italy %>% filter(Year == input$year_sel, House == input$house_sel)
})
ballot_React <- reactive({
ballot_it %>% filter(Year == input$year_sel, House == input$house_sel)
})
aggregate_list_React <- reactive({
aggregate_list_it %>% filter(Year == input$year_sel, House == input$house_sel)
})
pal <- reactive({
if(input$fill_sel == 'Voter turnout') {
colorNumeric(palette = 'YlOrRd',domain = italy_React()$Voter.turnout)
}
else if(input$fill_sel == 'Top party collocation') {
colorFactor(viridis(7), italy_React()$Collocation)
}
})
# Label for individual regions
reg_labels <- reactive({
reg_labels <- paste(
'<strong>Region: ', italy_React()$Region, '</strong><br/>',
'Voter turnout: ', italy_React()$Voter.turnout, '<br/>',
'Parties: ', italy_React()$Party
) %>%
lapply(htmltools::HTML)
})
output$nat_info <- renderInfoBox({
infoBox(
paste(
'Voter turnout: ',
ballot_React()$Voter.turnout,
'<br/>',
'Parties: ',
aggregate_list_React()$Party
) %>%
lapply(htmltools::HTML)
)
})
fillCol <- reactive({
#Fill column
if(input$fill_sel == 'Voter turnout') {
italy_React()$Voter.turnout
}
else if(input$fill_sel == 'Top party collocation') {
italy_React()$Collocation
}
})
map_data <- reactive({
if(input$shape_sel == 'Regions') {
m <- leaflet(italy_React()) %>%
addPolygons(
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels(),
highlightOptions = highlightOptions(color = "grey", weight = 3, bringToFront = TRUE),
fillColor = ~pal()(fillCol()))
}
else if(input$shape_sel == 'Voters') {
m <- leaflet(italy_React()) %>%
addCircleMarkers(
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels(),
italy_React()$centroid_lat,
italy_React()$centroid_long,
radius = sqrt(italy_React()$Voters/10000),
fillColor = ~pal()(fillCol()))
}
else{
m <- leaflet(italy_React()) %>%
addPolygons(
stroke = TRUE,
color = 'Grey',
weight = 1.5) %>%
addCircleMarkers(
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels(),
italy_React()$centroid_lat,
italy_React()$centroid_long,
radius = sqrt(italy_React()$Voters/10000),
fillColor = ~pal()(fillCol()))
}
})
output$map <- renderLeaflet({
map_data() %>%
addLegend(
pal = pal(),
values = fillCol(),
opacity = 0.7,
position = 'bottomright')
})
}
shinyApp(ui, server)
# TODO - ballot_chamber_it, "Valle d'aosta" contains an NA value for "Schede.non.valide" in 2013, for now we are going to count that value as zero
# National data (no region granularity)
ballot_senate_it <- read.csv(
"./source/elections/italy/ballots-Senate.csv",
header = TRUE,
sep = ";"
)
ballot_chamber_it <- read.csv(
"./source/elections/italy/ballots-Chamber.csv",
header = TRUE,
sep = ";"
)
list_senate_it <- read.csv(
"./source/elections/italy/lists-Senate.csv",
header = TRUE,
sep = ";"
)
list_chamber_it <- read.csv(
"./source/elections/italy/lists-Chamber.csv",
header = TRUE,
sep = ";"
)
# Data with region granularity (No votes coming from outside of Italy)
ballot_senate_reg <- read.csv(
"./source/elections/regions/ballots-Senate-Reg.csv",
header = TRUE,
sep = ";"
)
ballot_chamber_reg <- read.csv(
"./source/elections/regions/ballots-Chamber-Reg.csv",
header = TRUE,
sep = ";"
)
list_senate_reg <- read.csv(
"./source/elections/regions/lists-Senate-Reg.csv",
header = TRUE,
sep = ";"
)
list_chamber_reg <- read.csv(
"./source/elections/regions/lists-Chamber-Reg.csv",
header = TRUE,
sep = ";"
)
# Adding id column
ballot_senate_it <- ballot_senate_it %>% add_column(House = "Senate")
ballot_chamber_it <- ballot_chamber_it %>% add_column(House = "Chamber")
list_senate_it <- list_senate_it %>% add_column(House = "Senate")
list_chamber_it <- list_chamber_it %>% add_column(House = "Chamber")
ballot_senate_reg <- ballot_senate_reg %>% add_column(House = "Senate")
ballot_chamber_reg <- ballot_chamber_reg %>% add_column(House = "Chamber")
list_senate_reg <- list_senate_reg %>% add_column(House = "Senate")
list_chamber_reg <- list_chamber_reg %>% add_column(House = "Chamber")
# Joining
ballot_it <- full_join(
ballot_senate_it,
ballot_chamber_it
)
list_it <- full_join(
list_senate_it,
list_chamber_it
)
ballot_reg <- full_join(
ballot_senate_reg,
ballot_chamber_reg
)
list_reg <- full_join(
list_senate_reg,
list_chamber_reg
)
# Translating column names
colnames(ballot_it) <- c("Region", "Constituents", "Voters", "Empty.votes", "Null.votes", "Year", "House")
colnames(list_it) <- c("Region", "Party", "Votes", "Year", "House")
colnames(ballot_reg) <- c("Region", "Constituents", "Voters", "Empty.votes", "Null.votes", "Year", "House")
colnames(list_reg) <- c("Region", "Party", "Votes", "Year", "House")
# We can group all lines that have the same year, house (and party for lists)
# We don't care if votes come from within our outside the country (Region column)
# We can also drop columns indicating empty (Schede.bianche) or invalid (Schede.non.valide) votes
# A new column indicating the voter turnout is also added
ballot_it <- ballot_it %>%
subset(select = -c(Region, Empty.votes, Null.votes)) %>%
group_by(Year, House) %>%
summarise_all(sum) %>%
mutate(Voter.turnout = as.numeric(format(round((Voters / Constituents) * 100, 1), nsmall = 1)))
list_it <- list_it %>%
subset(select = -Region) %>%
group_by(Year, House, Party) %>%
summarise_all(sum)
# We want to "standardize" region names for both regional lists and ballots
# Trim trailing whitespaces
ballot_reg$Region <- trimws(
ballot_reg$Region,
which = "r"
)
# For certain years, region are divided into "zones" (e.g. CAMPANIA 1, CAMPANIA 2, ...). We should remove the trailing integers
ballot_reg$Region <- sub(
"\\s\\d+$",
"",
ballot_reg$Region
)
# We can now group by region, year and house standardize names for regions in which is not constant throughout the whole dataset
ballot_reg <- ballot_reg %>%
subset(select = -c(Empty.votes, Null.votes)) %>%
group_by(Region, Year, House) %>%
summarise_all(sum) %>%
mutate(Voter.turnout = as.numeric(format(round((Voters / Constituents) * 100, 1), nsmall = 1))) %>%
mutate(
Region = str_to_upper(Region), Region = case_when(
Region == "ABRUZZI" ~ "ABRUZZO",
Region == "TRENTINO-ALTO ADIGE/SUDTIROL" ~ "TRENTINO ALTO ADIGE",
Region == "TRENTINO-ALTO ADIGE" ~ "TRENTINO ALTO ADIGE",
Region == "FRIULI VENEZIA GIULIA" ~ "FRIULI-VENEZIA GIULIA",
Region == "EMILIA-ROMAGNA" ~ "EMILIA ROMAGNA",
Region == "VALLE D'AOSTA -" ~ "VALLE D'AOSTA",
Region == "VALLE D'AOSTA-" ~ "VALLE D'AOSTA",
TRUE ~ Region
)
)
list_reg$Region <- trimws(
list_reg$Region,
which = "r"
)
list_reg$Region <- sub(
"\\s\\d+$",
"",
list_reg$Region
)
list_reg <- list_reg %>%
group_by(Region, Year, House, Party) %>%
summarise_all(sum) %>%
mutate(
Region = str_to_upper(Region), Region = case_when(
Region == "ABRUZZI" ~ "ABRUZZO",
Region == "TRENTINO-ALTO ADIGE/SUDTIROL" ~ "TRENTINO ALTO ADIGE",
Region == "TRENTINO-ALTO ADIGE" ~ "TRENTINO ALTO ADIGE",
Region == "FRIULI VENEZIA GIULIA" ~ "FRIULI-VENEZIA GIULIA",
Region == "EMILIA-ROMAGNA" ~ "EMILIA ROMAGNA",
Region == "VALLE D'AOSTA -" ~ "VALLE D'AOSTA",
Region == "VALLE D'AOSTA-" ~ "VALLE D'AOSTA",
TRUE ~ Region
)
)
# TODO - Improve this aberration
#48 - 63 - Drop column since single regions have their own data
#53 - 58 - Use data for both regions
#Duplicating votes for 'Abruzzi e Molise' and moving them to the individual regions
list_reg <- list_reg[!(list_reg$Region=='ABRUZZI E MOLISE' & list_reg$Year==1948),]
list_reg <- list_reg[!(list_reg$Region=='ABRUZZI E MOLISE' & list_reg$Year==1968),]
list_reg$Region[list_reg$Region=='ABRUZZI E MOLISE'] <- 'ABRUZZO'
ballot_reg <- ballot_reg[!(ballot_reg$Region=='ABRUZZI E MOLISE' & ballot_reg$Year==1948),]
ballot_reg <- ballot_reg[!(ballot_reg$Region=='ABRUZZI E MOLISE' & ballot_reg$Year==1968),]
ballot_reg$Region[ballot_reg$Region=='ABRUZZI E MOLISE'] <- 'ABRUZZO'
ballot_reg
ballot_it
list_it_top <- list_it %>%
group_by(Year, House) %>%
filter(quantile(Votes, 0.7)<Votes)
list_reg_top <- list_reg %>%
group_by(Region, Year, House) %>%
filter(quantile(Votes, 0.7)<Votes)
# To this top parties, we would also like to associate their poilitical collocation
# (Far-Left,Left,Centre-Left,Centre,Centre-Right,Syncretic,Right,Far-Right)
party_collocation <- read.csv(
"./source/elections/party-collocation.csv",
header = TRUE,
sep = ";"
)
list_it_top <- left_join(
list_it_top,
party_collocation
)
list_reg_top <- left_join(
list_reg_top,
party_collocation
)
list_it_top
list_reg_top
# Centroid latitude and longitude in order to find the circle marker center for leaflet
italy <- ne_states(country="Italy", returnclass="sf") %>%
rename(Region = region) %>%
group_by(Region) %>%
summarise() %>%
mutate(
Region = str_to_upper(Region),
Region = case_when(
Region == 'APULIA' ~ 'PUGLIA',
Region == 'SICILY' ~ 'SICILIA',
Region == 'TRENTINO-ALTO ADIGE' ~ 'TRENTINO ALTO ADIGE',
Region == 'EMILIA-ROMAGNA' ~ 'EMILIA ROMAGNA',
TRUE ~ Region
),
centroid_lat = st_coordinates(st_centroid(geometry))[,1],
centroid_long = st_coordinates(st_centroid(geometry))[,2]
)
# Building aggregate lists
aggregate_list_it <- list_it_top %>%
group_by(Year, House) %>%
arrange(-Votes) %>%
mutate(
Party = paste(Party, Votes, sep = ':', collapse = '<br/>'),
Collocation = first(Collocation)
) %>%
subset(select = -c(Votes)) %>%
distinct(Year, House, Party, Collocation)
aggregate_list_reg <- list_reg_top %>%
group_by(Year, Region, House) %>%
arrange(-Votes) %>%
mutate(
Party = paste(Party, Votes, sep = ':', collapse = '<br/>'),
Collocation = first(Collocation)
) %>%
subset(select = -c(Votes)) %>%
distinct(Region, Year, House, Party, Collocation)
# Contains geom data + regional data for both lists and ballots
italy <- italy %>%
inner_join(ballot_reg, by='Region') %>%
inner_join(aggregate_list_reg, by=c('Region', 'Year', 'House'))
italy
# Voter turnout trend
ggplot(ballot_it, aes(x=Year, y=Voter.turnout, color=House)) +
ggtitle("Voter turnout trend") +
geom_line() +
geom_point() +
expand_limits(y=c(50, 100)) +
scale_x_continuous(breaks=election_years) +
scale_color_brewer(palette = "Set2") +
ylab('Voter turnout') +
facet_grid(vars(House)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
#geom_text_repel(aes(x=1948, label = 'Hello'))
#Heatmap x=year, y=region, fill=collocation
ggplot(aggregate_list_reg, aes(x=Year,y=Region,fill=Collocation)) +
ggtitle("Top party political collocation") +
geom_tile(colour='#000000') +
scale_x_binned(breaks=election_years) +
scale_fill_brewer(palette = "Set2") +
facet_grid(vars(House)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
#Heatmap x=year, y=region, fill=collocation
ggplot(aggregate_list_reg, aes(x=Year,y=Region,fill=Collocation)) +
ggtitle("Top party political collocation") +
geom_tile(colour='#000000') +
scale_x_continuous(breaks=election_years) +
scale_fill_brewer(palette = "Set2") +
facet_grid(vars(House)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
# Y = Votes, X = years, Bar = divided by consitutents/voters (%)
ggplot(ballots_it) +
ggtitle("Voters/Constituents proportion") +
geom_hline(yintercept=mean(ballots_it$Voters), linetype='dotted')+
geom_col(aes(x=Year, y=Constituents, fill='Constituents'), colour='#000000') +
geom_col(aes(x=Year, y=Voters, fill='Voters'), colour='#000000') +
scale_x_continuous(breaks=election_years) +
scale_y_continuous(labels = scales::unit_format(unit = "M", scale = 1e-6)) +
scale_fill_brewer(palette = "Set2") +
facet_grid(vars(House)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
