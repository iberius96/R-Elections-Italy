})
output$nat_info <- renderInfoBox({
infoBox(
paste(
'Voter turnout: ',
ballot_React()$Voter.turnout,
'<br/>',
'Parties:<br/>',
aggregate_list_React()$Party
) %>%
lapply(htmltools::HTML)
)
})
map_data <- reactive({
if((input$shape_sel == 'Regions')) {
m <- leaflet(italy_React()) %>%
addPolygons(
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels(),
highlightOptions = highlightOptions(color = "grey", weight = 3, bringToFront = TRUE),
fillColor = ~pal()(fillCol()))
}
else if(input$shape_sel == 'Voters') {
m <- leaflet(italy_React()) %>%
addCircleMarkers(
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels(),
italy_React()$centroid_lat,
italy_React()$centroid_long,
radius = sqrt(italy_React()$Voters/10000),
fillColor = ~pal()(fillCol()))
}
else{
m <- leaflet(italy_React()) %>%
addPolygons(
stroke = TRUE,
color = 'Grey',
weight = 1.5) %>%
addCircleMarkers(
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels(),
italy_React()$centroid_lat,
italy_React()$centroid_long,
radius = sqrt(italy_React()$Voters/10000),
fillColor = ~pal()(fillCol()))
}
})
output$map <- renderLeaflet({
if(input$fill_sel == 'Voter turnout') {
map_data() %>%
addLegend(
pal = pal(),
values = fillCol(),
opacity = 0.7,
position = 'bottomright',
title = 'Voter Turnout',
labFormat = labelFormat(suffix = "%"),
)
}
else {
map_data() %>%
addLegend(
pal = pal(),
values = fillCol(),
opacity = 0.7,
position = 'bottomright',
title = 'Collocation',
)
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel(title=h4("Electoral data", align="center")),
sidebarLayout(
sidebarPanel(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = election_years
),
selectInput(
inputId =  'house_sel',
label = "Select house:",
choices = c('Chamber', 'Senate')
),
selectInput(
inputId =  'shape_sel',
label = 'Select shape:',
choices = c('Regions', 'Voters', 'Both')
),
selectInput(
inputId = 'fill_sel',
label = 'Select fill color:',
choices = c('Voter turnout', 'Top party collocation')
)
),
mainPanel(
leafletOutput('map'),
fluidRow(infoBoxOutput('nat_info'))
),
)
)
server <- function(input, output) {
# Filtering
italy_React <- reactive({
italy %>% filter(Year == input$year_sel, House == input$house_sel)
})
ballot_React <- reactive({
ballot_it %>% filter(Year == input$year_sel, House == input$house_sel)
})
aggregate_list_React <- reactive({
aggregate_list_it %>% filter(Year == input$year_sel, House == input$house_sel)
})
pal <- reactive({
if(input$fill_sel == 'Voter turnout') {
colorNumeric(
palette = 'RdYlGn',
domain = c(min(italy$Voter.turnout), max(italy$Voter.turnout)
)
)
}
else {
colorFactor(
'Set2',
domain=c('Far-Left','Left','Centre-Left','Centre','Syncretic','Centre-Right','Right','Far-Right')
)
}
})
fillCol <- reactive({
#Fill column
if(input$fill_sel == 'Voter turnout') {
italy_React()$Voter.turnout
}
else {
italy_React()$Collocation
}
})
# Label for individual regions
reg_labels <- reactive({
reg_labels <- paste(
'<strong>Region: ', italy_React()$Region, '</strong><br/>',
'Voter turnout: ', italy_React()$Voter.turnout, '%<br/>',
'Parties:<br/>', italy_React()$Party
) %>%
lapply(htmltools::HTML)
})
output$nat_info <- renderInfoBox({
infoBox(
paste(
'Voter turnout: ', ballot_React()$Voter.turnout, '%<br/>',
'Parties:<br/>', aggregate_list_React()$Party
) %>%
lapply(htmltools::HTML)
)
})
map_data <- reactive({
if((input$shape_sel == 'Regions')) {
m <- leaflet(italy_React()) %>%
addPolygons(
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels(),
highlightOptions = highlightOptions(color = "grey", weight = 3, bringToFront = TRUE),
fillColor = ~pal()(fillCol()))
}
else if(input$shape_sel == 'Voters') {
m <- leaflet(italy_React()) %>%
addCircleMarkers(
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels(),
italy_React()$centroid_lat,
italy_React()$centroid_long,
radius = sqrt(italy_React()$Voters/10000),
fillColor = ~pal()(fillCol()))
}
else{
m <- leaflet(italy_React()) %>%
addPolygons(
stroke = TRUE,
color = 'Grey',
weight = 1.5) %>%
addCircleMarkers(
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels(),
italy_React()$centroid_lat,
italy_React()$centroid_long,
radius = sqrt(italy_React()$Voters/10000),
fillColor = ~pal()(fillCol()))
}
})
output$map <- renderLeaflet({
if(input$fill_sel == 'Voter turnout') {
map_data() %>%
addLegend(
pal = pal(),
values = fillCol(),
opacity = 0.7,
position = 'bottomright',
title = 'Voter Turnout',
labFormat = labelFormat(suffix = "%"),
)
}
else {
map_data() %>%
addLegend(
pal = pal(),
values = fillCol(),
opacity = 0.7,
position = 'bottomright',
title = 'Collocation',
)
}
})
}
shinyApp(ui, server)
ggplotX(ballot_it, aes(x=Year, y=Voter.turnout, color=House)) +
ggtitle("Voter turnout") +
geom_line() +
geom_point() +
expand_limits(y=c(50, 100)) +
scale_x_continuous(breaks=election_years) +
scale_color_brewer(palette = "Set2") +
ylab('Voter turnout') +
facet_grid(vars(House)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggplot(ballot_it, aes(x=Year, y=Voter.turnout, color=House)) +
ggtitle("Voter turnout") +
geom_line() +
geom_point() +
expand_limits(y=c(50, 100)) +
scale_x_continuous(breaks=election_years) +
scale_color_brewer(palette = "Set2") +
ylab('Voter turnout') +
facet_grid(vars(House)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
#geom_text_repel(aes(x=1948, label = 'Hello'))
# Y = Votes, X = years, Bar = divided by consitutents/voters (%)
ggplot(ballots_it) +
ggtitle("Voters/Constituents proportion") +
geom_hline(yintercept=mean(ballots_it$Voters), linetype='dotted')+
geom_col(aes(x=Year, y=Constituents, fill='Constituents'), colour='#000000') +
geom_col(aes(x=Year, y=Voters, fill='Voters'), colour='#000000') +
scale_x_continuous(breaks=election_years) +
scale_y_continuous(labels = scales::unit_format(unit = "M", scale = 1e-6)) +
scale_fill_brewer(palette = "Set2", direction=-1) +
facet_grid(vars(House)) +
theme_bw() +
theme(
axis.text.x = element_text(angle = 60, hjust = 1),
legend.title = element_blank())
# Diversity - Total nr of parties voted each election
list_it_grouped <- list_it %>%
group_by(Year, House) %>%
summarise(Party = n_distinct(Party))
ggplot(list_it_grouped, aes(x=Year, y=Party, fill=House)) +
ggtitle("Total nr. of parties per election year") +
geom_smooth(method='lm', color='black', se=FALSE, linetype='twodash', size=0.75, show.legend=FALSE, alpha=0.4) +
geom_col(colour='#000000') +
scale_x_continuous(breaks=election_years) +
scale_fill_brewer(palette = "Set2") +
ylab('Nr. of parties') +
facet_grid(vars(House)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
#Heatmap x=year, y=region, fill=collocation
ggplot(aggregate_list_reg, aes(x=Year,y=Region,fill=Collocation)) +
ggtitle("Political collocation of top voted parties") +
geom_tile(colour='black') +
scale_x_continuous(breaks=election_years) +
scale_fill_brewer(palette = "Set2") +
facet_grid(vars(House)) +
theme_test() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
#x=year, y=% of votes among the top parties, fill=collocation
list_coll_percent <- list_reg_top %>%
group_by(Year,House,Collocation) %>%
summarise(Votes = sum(Votes)) %>%
mutate(Percent = (Votes/sum(Votes)) * 100)  %>%
arrange(Year, House, Collocation)
list_coll_percent
list_coll_grouped <- list_coll_percent  %>%
filter(!(grepl('Syncretic', Collocation) & (Year < 2013))) %>%
mutate(Collocation =
ifelse(
grepl('Left', Collocation),
'Left',
ifelse(
grepl('Right', Collocation),
'Right',
Collocation
)
)
) %>%
group_by(Year,House,Collocation) %>%
summarise_all(sum)
coll_years_anim <- ggplot(
list_coll_grouped,
aes(x=Year, y=Percent, color=Collocation)) +
ggtitle("Collocation of top parties") +
geom_line() +
geom_point() +
geom_vline(xintercept=1994, color='Grey', linetype=2, alpha=0.5) +
geom_vline(xintercept=2013, color='Grey', linetype=2, alpha=0.5) +
geom_text(aes(x = Year + 1, label = Collocation), hjust = 0) +
scale_x_continuous(breaks=election_years, limits = c(min(election_years), max(election_years)+7)) +
scale_color_brewer(palette = "Set2") +
ylab('% of votes') +
facet_grid(vars(House)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 60, hjust = 1),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "grey", fill = NA)
) +
transition_reveal(Year) +
ease_aes("linear") +
enter_fade() +
exit_fade()
animate(coll_years_anim, fps = 25, duration = 20, width = 800, height = 600, end_pause = 100)
anim_save("collocation_over_years.gif")
include_graphics("collocation_over_years.gif")
# TODO - Finish fixing
plot_coll_bar <- function(curr_house) {
list_coll_percent %>%
filter(!grepl(curr_house, House)) %>%
plot_ly(
data = .,
x = ~Collocation,
y = ~Percent,
color = ~Collocation,
frame = ~Year,
text = ~Percent,
hoverinfo = "text",
type = 'bar',
mode = 'markers'
) %>%
layout(
title = 'Collocation of top parties'
) %>%
animation_opts(
easing = "elastic", redraw = FALSE
)
}
coll_senate <- plot_coll_bar('Senate')
coll_chamber <- plot_coll_bar('Chamber')
subplot(coll_chamber, coll_senate, nrows = 2, shareX = TRUE)
# TODO - Missing values certain years
ui <- fluidPage(
titlePanel(title=h4("Electoral data", align="center")),
sidebarLayout(
sidebarPanel(
selectInput(
inputId =  'year_sel',
label = "Select year:",
choices = election_years
),
selectInput(
inputId =  'house_sel',
label = "Select house:",
choices = c('Chamber', 'Senate')
),
selectInput(
inputId =  'shape_sel',
label = 'Select shape:',
choices = c('Regions', 'Voters', 'Both')
),
selectInput(
inputId = 'fill_sel',
label = 'Select fill color:',
choices = c('Voter turnout', 'Top party collocation')
)
),
mainPanel(
leafletOutput('map'),
fluidRow(infoBoxOutput('nat_info'))
),
)
)
server <- function(input, output) {
# Filtering
italy_React <- reactive({
italy %>% filter(Year == input$year_sel, House == input$house_sel)
})
ballot_React <- reactive({
ballot_it %>% filter(Year == input$year_sel, House == input$house_sel)
})
aggregate_list_React <- reactive({
aggregate_list_it %>% filter(Year == input$year_sel, House == input$house_sel)
})
pal <- reactive({
if(input$fill_sel == 'Voter turnout') {
colorNumeric(
palette = 'RdYlGn',
domain = c(min(italy$Voter.turnout), max(italy$Voter.turnout)
)
)
}
else {
colorFactor(
'Set2',
domain=c('Far-Left','Left','Centre-Left','Centre','Syncretic','Centre-Right','Right','Far-Right')
)
}
})
fillCol <- reactive({
#Fill column
if(input$fill_sel == 'Voter turnout') {
italy_React()$Voter.turnout
}
else {
italy_React()$Collocation
}
})
# Label for individual regions
reg_labels <- reactive({
reg_labels <- paste(
'<strong>Region: ', italy_React()$Region, '</strong><br/>',
'Voter turnout: ', italy_React()$Voter.turnout, '%<br/>',
'Parties:<br/>', italy_React()$Party
) %>%
lapply(htmltools::HTML)
})
output$nat_info <- renderInfoBox({
infoBox(
paste(
'Voter turnout: ', ballot_React()$Voter.turnout, '%<br/>',
'Parties:<br/>', aggregate_list_React()$Party
) %>%
lapply(htmltools::HTML)
)
})
map_data <- reactive({
if((input$shape_sel == 'Regions')) {
m <- leaflet(italy_React()) %>%
addPolygons(
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels(),
highlightOptions = highlightOptions(color = "grey", weight = 3, bringToFront = TRUE),
fillColor = ~pal()(fillCol()))
}
else if(input$shape_sel == 'Voters') {
m <- leaflet(italy_React()) %>%
addCircleMarkers(
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels(),
italy_React()$centroid_lat,
italy_React()$centroid_long,
radius = sqrt(italy_React()$Voters/10000),
fillColor = ~pal()(fillCol()))
}
else{
m <- leaflet(italy_React()) %>%
addPolygons(
stroke = TRUE,
color = 'Grey',
weight = 1.5) %>%
addCircleMarkers(
stroke = TRUE,
color = 'Grey',
weight = 1.5,
label = reg_labels(),
italy_React()$centroid_lat,
italy_React()$centroid_long,
radius = sqrt(italy_React()$Voters/10000),
fillColor = ~pal()(fillCol()))
}
})
output$map <- renderLeaflet({
if(input$fill_sel == 'Voter turnout') {
map_data() %>%
addLegend(
pal = pal(),
values = fillCol(),
opacity = 0.7,
position = 'bottomright',
title = 'Voter Turnout',
labFormat = labelFormat(suffix = "%"),
)
}
else {
map_data() %>%
addLegend(
pal = pal(),
values = fillCol(),
opacity = 0.7,
position = 'bottomright',
title = 'Collocation',
)
}
})
}
shinyApp(ui, server)
